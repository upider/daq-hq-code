// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request_message.proto

#include "message/request_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace message_pass {
constexpr RequestMessage::RequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sink_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(PROTOBUF_ULONGLONG(0))
  , cmd_(0)
{}
struct RequestMessageDefaultTypeInternal {
  constexpr RequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestMessageDefaultTypeInternal() {}
  union {
    RequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
}  // namespace message_pass
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_request_5fmessage_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_request_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_request_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_request_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_pass::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_pass::RequestMessage, cmd_),
  PROTOBUF_FIELD_OFFSET(::message_pass::RequestMessage, key_),
  PROTOBUF_FIELD_OFFSET(::message_pass::RequestMessage, sink_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message_pass::RequestMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_pass::_RequestMessage_default_instance_),
};

const char descriptor_table_protodef_request_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025request_message.proto\022\014message_pass\"\200\001"
  "\n\016RequestMessage\022-\n\003cmd\030\001 \001(\0162 .message_"
  "pass.RequestMessage.CMD\022\013\n\003key\030\002 \001(\004\022\014\n\004"
  "sink\030\003 \001(\t\"$\n\003CMD\022\007\n\003GET\020\000\022\007\n\003DEL\020\001\022\013\n\007R"
  "ECOVER\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_request_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_5fmessage_2eproto = {
  false, false, 176, descriptor_table_protodef_request_5fmessage_2eproto, "request_message.proto", 
  &descriptor_table_request_5fmessage_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_request_5fmessage_2eproto::offsets,
  file_level_metadata_request_5fmessage_2eproto, file_level_enum_descriptors_request_5fmessage_2eproto, file_level_service_descriptors_request_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_request_5fmessage_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_request_5fmessage_2eproto);
  return descriptor_table_request_5fmessage_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_request_5fmessage_2eproto(&descriptor_table_request_5fmessage_2eproto);
namespace message_pass {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestMessage_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_request_5fmessage_2eproto);
  return file_level_enum_descriptors_request_5fmessage_2eproto[0];
}
bool RequestMessage_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RequestMessage_CMD RequestMessage::GET;
constexpr RequestMessage_CMD RequestMessage::DEL;
constexpr RequestMessage_CMD RequestMessage::RECOVER;
constexpr RequestMessage_CMD RequestMessage::CMD_MIN;
constexpr RequestMessage_CMD RequestMessage::CMD_MAX;
constexpr int RequestMessage::CMD_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RequestMessage::_Internal {
 public:
};

RequestMessage::RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_pass.RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sink().empty()) {
    sink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sink(), 
      GetArena());
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&key_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:message_pass.RequestMessage)
}

void RequestMessage::SharedCtor() {
sink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&key_)) + sizeof(cmd_));
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:message_pass.RequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sink_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestMessage::ArenaDtor(void* object) {
  RequestMessage* _this = reinterpret_cast< RequestMessage* >(object);
  (void)_this;
}
void RequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message_pass.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sink_.ClearToEmpty();
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&key_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .message_pass.RequestMessage.CMD cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::message_pass::RequestMessage_CMD>(val));
        } else goto handle_unusual;
        continue;
      // uint64 key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sink = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sink();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message_pass.RequestMessage.sink"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_pass.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_pass.RequestMessage.CMD cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint64 key = 2;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key(), target);
  }

  // string sink = 3;
  if (this->sink().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sink().data(), static_cast<int>(this->_internal_sink().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_pass.RequestMessage.sink");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sink(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_pass.RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_pass.RequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sink = 3;
  if (this->sink().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sink());
  }

  // uint64 key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_key());
  }

  // .message_pass.RequestMessage.CMD cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_pass.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_pass.RequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_pass.RequestMessage)
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_pass.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sink().size() > 0) {
    _internal_set_sink(from._internal_sink());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void RequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_pass.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_pass.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sink_.Swap(&other->sink_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestMessage, cmd_)
      + sizeof(RequestMessage::cmd_)
      - PROTOBUF_FIELD_OFFSET(RequestMessage, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message_pass
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message_pass::RequestMessage* Arena::CreateMaybeMessage< ::message_pass::RequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_pass::RequestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
