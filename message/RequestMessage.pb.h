// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequestMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RequestMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RequestMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RequestMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RequestMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RequestMessage_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_RequestMessage_2eproto_metadata_getter(int index);
namespace message_pass {
class RequestMessage;
struct RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
}  // namespace message_pass
PROTOBUF_NAMESPACE_OPEN
template<> ::message_pass::RequestMessage* Arena::CreateMaybeMessage<::message_pass::RequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message_pass {

enum RequestMessage_CMD : int {
  RequestMessage_CMD_GET = 0,
  RequestMessage_CMD_DEL = 1,
  RequestMessage_CMD_RECOVER = 2,
  RequestMessage_CMD_RequestMessage_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestMessage_CMD_RequestMessage_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestMessage_CMD_IsValid(int value);
constexpr RequestMessage_CMD RequestMessage_CMD_CMD_MIN = RequestMessage_CMD_GET;
constexpr RequestMessage_CMD RequestMessage_CMD_CMD_MAX = RequestMessage_CMD_RECOVER;
constexpr int RequestMessage_CMD_CMD_ARRAYSIZE = RequestMessage_CMD_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestMessage_CMD_descriptor();
template<typename T>
inline const std::string& RequestMessage_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestMessage_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestMessage_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestMessage_CMD_descriptor(), enum_t_value);
}
inline bool RequestMessage_CMD_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestMessage_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestMessage_CMD>(
    RequestMessage_CMD_descriptor(), name, value);
}
// ===================================================================

class RequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_pass.RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {}
  virtual ~RequestMessage();
  explicit constexpr RequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMessage* New() const final {
    return CreateMaybeMessage<RequestMessage>(nullptr);
  }

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_pass.RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_RequestMessage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestMessage_CMD CMD;
  static constexpr CMD GET =
    RequestMessage_CMD_GET;
  static constexpr CMD DEL =
    RequestMessage_CMD_DEL;
  static constexpr CMD RECOVER =
    RequestMessage_CMD_RECOVER;
  static inline bool CMD_IsValid(int value) {
    return RequestMessage_CMD_IsValid(value);
  }
  static constexpr CMD CMD_MIN =
    RequestMessage_CMD_CMD_MIN;
  static constexpr CMD CMD_MAX =
    RequestMessage_CMD_CMD_MAX;
  static constexpr int CMD_ARRAYSIZE =
    RequestMessage_CMD_CMD_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_descriptor() {
    return RequestMessage_CMD_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_Name.");
    return RequestMessage_CMD_Name(enum_t_value);
  }
  static inline bool CMD_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CMD* value) {
    return RequestMessage_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSinkFieldNumber = 3,
    kCmdFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string sink = 3;
  void clear_sink();
  const std::string& sink() const;
  void set_sink(const std::string& value);
  void set_sink(std::string&& value);
  void set_sink(const char* value);
  void set_sink(const char* value, size_t size);
  std::string* mutable_sink();
  std::string* release_sink();
  void set_allocated_sink(std::string* sink);
  private:
  const std::string& _internal_sink() const;
  void _internal_set_sink(const std::string& value);
  std::string* _internal_mutable_sink();
  public:

  // .message_pass.RequestMessage.CMD cmd = 1;
  void clear_cmd();
  ::message_pass::RequestMessage_CMD cmd() const;
  void set_cmd(::message_pass::RequestMessage_CMD value);
  private:
  ::message_pass::RequestMessage_CMD _internal_cmd() const;
  void _internal_set_cmd(::message_pass::RequestMessage_CMD value);
  public:

  // uint32 key = 2;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:message_pass.RequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sink_;
  int cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RequestMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestMessage

// .message_pass.RequestMessage.CMD cmd = 1;
inline void RequestMessage::clear_cmd() {
  cmd_ = 0;
}
inline ::message_pass::RequestMessage_CMD RequestMessage::_internal_cmd() const {
  return static_cast< ::message_pass::RequestMessage_CMD >(cmd_);
}
inline ::message_pass::RequestMessage_CMD RequestMessage::cmd() const {
  // @@protoc_insertion_point(field_get:message_pass.RequestMessage.cmd)
  return _internal_cmd();
}
inline void RequestMessage::_internal_set_cmd(::message_pass::RequestMessage_CMD value) {
  
  cmd_ = value;
}
inline void RequestMessage::set_cmd(::message_pass::RequestMessage_CMD value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:message_pass.RequestMessage.cmd)
}

// uint32 key = 2;
inline void RequestMessage::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestMessage::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestMessage::key() const {
  // @@protoc_insertion_point(field_get:message_pass.RequestMessage.key)
  return _internal_key();
}
inline void RequestMessage::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void RequestMessage::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:message_pass.RequestMessage.key)
}

// string sink = 3;
inline void RequestMessage::clear_sink() {
  sink_.ClearToEmpty();
}
inline const std::string& RequestMessage::sink() const {
  // @@protoc_insertion_point(field_get:message_pass.RequestMessage.sink)
  return _internal_sink();
}
inline void RequestMessage::set_sink(const std::string& value) {
  _internal_set_sink(value);
  // @@protoc_insertion_point(field_set:message_pass.RequestMessage.sink)
}
inline std::string* RequestMessage::mutable_sink() {
  // @@protoc_insertion_point(field_mutable:message_pass.RequestMessage.sink)
  return _internal_mutable_sink();
}
inline const std::string& RequestMessage::_internal_sink() const {
  return sink_.Get();
}
inline void RequestMessage::_internal_set_sink(const std::string& value) {
  
  sink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMessage::set_sink(std::string&& value) {
  
  sink_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message_pass.RequestMessage.sink)
}
inline void RequestMessage::set_sink(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:message_pass.RequestMessage.sink)
}
inline void RequestMessage::set_sink(const char* value,
    size_t size) {
  
  sink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message_pass.RequestMessage.sink)
}
inline std::string* RequestMessage::_internal_mutable_sink() {
  
  return sink_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMessage::release_sink() {
  // @@protoc_insertion_point(field_release:message_pass.RequestMessage.sink)
  return sink_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMessage::set_allocated_sink(std::string* sink) {
  if (sink != nullptr) {
    
  } else {
    
  }
  sink_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sink,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message_pass.RequestMessage.sink)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message_pass

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message_pass::RequestMessage_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_pass::RequestMessage_CMD>() {
  return ::message_pass::RequestMessage_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RequestMessage_2eproto
